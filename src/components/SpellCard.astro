---
import { type CollectionEntry } from "astro:content";
import SpellSchool from "./SpellSchool.astro";
import SpellRange from "./SpellRange.astro";
import SpellComponents from "./SpellComponents.astro";
import SpellMaterialComponent from "./SpellMaterialComponent.astro";

interface Props {
    spell: CollectionEntry<"spells">["data"]["spell"];
}
const { spell } = Astro.props;
---
<div class="spell-card">
    <div class="name">{spell.name}</div>
    <SpellSchool class="school" school={spell.school}/>
    <div class="duration">
    </div>
    <SpellRange class="range" range={spell.range} />
    <SpellComponents class="components" components={spell.components} />
    { spell.components?.m ? <SpellMaterialComponent class="cost" materialComponents={spell.components.m} /> : null}
    <div class="description">
        <!--
         {spell.entries.map((entry) => {
             if(typeof entry === "string") {
                 return <p>{entry}</p>
             } else {
                 return <p>{JSON.stringify(entry, undefined, 2)}</p>
             }
         })}
        -->
    </div>
</div>

<style>
    .spell-card {
        --min-size: var(--size-32);

        display: grid;
        grid-template-areas:
    "duration name range"
    "description description description"
    "components cost school";
        grid-template-columns: auto 1fr auto;
        grid-template-rows: auto 1fr auto;
        gap: var(--size-8);

        .duration {
            grid-area: duration;
            background: red;
        }
        .name {
            grid-area: name;
            background: orange;
        }
        .range {
            grid-area: range;
        }
        .description {
            grid-area: description;
        }
        .components {
            grid-area: components;
        }
        .cost {
            grid-area: cost;
        }
        .school {
            grid-area: school;
        }

        .duration,
        .name,
        .range,
        .description,
        .components,
        .cost {
            min-width: var(--min-size);
            min-height: var(--min-size);
        }
    }
</style>