---
import BaseLayout from "./BaseLayout.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import SpellCard from "../components/SpellCard.astro";
import { Icon } from "astro-icon/components";

interface Props {
  characterSpellNameList: CollectionEntry<"spells">["data"]["spell"][0]["name"][];
  characterName: string;
}
const { characterSpellNameList, characterName } = Astro.props;

const spells = await getCollection("spells");
const spellList = spells.flatMap<CollectionEntry<"spells">["data"]["spell"][0]>(
  (spellCollection: CollectionEntry<"spells">) => spellCollection.data.spell,
);

const compareActions = (
  a: CollectionEntry<"spells">["data"]["spell"][0],
  b: CollectionEntry<"spells">["data"]["spell"][0],
) => {
  const actionOrder = ["action", "bonus", "reaction", "minute", "hour", "day"];
  const aIndex = actionOrder.indexOf(a.time[0]?.unit ?? "action");
  const bIndex = actionOrder.indexOf(b.time[0]?.unit ?? "action");
  return aIndex - bIndex;
};

const characterSpellList = spellList
  .filter(
    (spell: CollectionEntry<"spells">["data"]["spell"][0]) =>
      characterSpellNameList.includes(spell.name) && !spell.reprintedAs,
  )
  .sort(
    (a, b) =>
      a.level - b.level || compareActions(a, b) || a.name.localeCompare(b.name),
  );

const groupedAsLists: CollectionEntry<"spells">["data"]["spell"][0][][] = [];
let currentLevel = -1;

for (const spell of characterSpellList) {
  if (spell.level !== currentLevel) {
    // start a new sublist
    groupedAsLists.push([]);
    currentLevel = spell.level;
  }
  groupedAsLists[groupedAsLists.length - 1].push(spell);
}

const isListsNotMatching =
  characterSpellList.length !== characterSpellNameList.length;
---

<BaseLayout title={characterName}>
  <header>
    <a href="/characters"><Icon name="arrow-left" /></a>
    <h1>
      {characterName}s Spell list {
        isListsNotMatching
          ? `(${characterSpellList.length}/${characterSpellNameList.length})`
          : ""
      }
    </h1>
  </header>
  <div class="spell-card-layout">
    {
      groupedAsLists.map((spellSubList) => (
        <div class="same-level-list">
          {spellSubList.map((spell) => (
            <SpellCard spell={spell} />
          ))}
        </div>
      ))
    }
  </div>
</BaseLayout>

<style>
  header {
    display: flex;
    gap: var(--size-16);
    align-items: center;

    [data-icon] {
      --icon-size: var(--size-32);

      width: var(--icon-size);
      height: var(--icon-size);
    }
  }

  .spell-card-layout {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--size-384), 1fr));
    gap: var(--size-16);

    .same-level-list {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: subgrid;
      gap: inherit;
    }
  }
</style>
