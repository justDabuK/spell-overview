---
import BaseLayout from "../../layouts/BaseLayout.astro";

import { getCollection, type CollectionEntry } from "astro:content";
import SpellCard from "../../components/SpellCard.astro";

const spells = await getCollection("spells");
const spellList = spells.flatMap<CollectionEntry<"spells">["data"]["spell"]>((spellCollection: CollectionEntry<"spells">) => spellCollection.data.spell)
const characterSpellNameList: CollectionEntry<"spells">["data"]["spell"][0]["name"][] = [
    "Create Bonfire",
    "Guidance",
    "Poison Spray",
    "Earth Tremor",
    "Sleep",
    "Fog Cloud",
    "Jump",
    "Dust Devil",
    "Earthbind",
    "Phantasmal Force",
    "Blink",
    "Dispel Magic",
    "Plant Growth",
    "Conjure Woodland Beings",
    "Dimension Door",
    "Polymorph",
    "Insect Plague",
    "Maelstrom",
    "Transport via Plants",
]

const compareActions = (a: CollectionEntry<"spells">["data"]["spell"], b: CollectionEntry<"spells">["data"]["spell"]) => {
    const actionOrder = ["action", "bonus", "reaction", "minute", "hour", "day"];
    const aIndex = actionOrder.indexOf(a.time[0]?.unit ?? "action");
    const bIndex = actionOrder.indexOf(b.time[0]?.unit ?? "action");
    return aIndex - bIndex;
}

const characterSpellList = spellList
    .filter((spell: CollectionEntry<"spells">["data"]["spell"]) => characterSpellNameList.includes(spell.name) && ["XPHB", "SCC", "XGE"].includes(spell.source))
    .sort((a, b) => a.level - b.level || compareActions(a, b) || a.name.localeCompare(b.name))
const groupedAsLists: CollectionEntry<"spells">["data"]["spell"][][] = [];
let currentLevel = -1;

for (const spell of characterSpellList) {
    if (spell.level !== currentLevel) {
        // start a new sublist
        groupedAsLists.push([]);
        currentLevel = spell.level;
    }
    groupedAsLists[groupedAsLists.length - 1].push(spell);
}

---
<BaseLayout>
    <h1>Spell list</h1>
    <div class="spell-card-layout">
        {groupedAsLists.map((spellSubList) => (
            <div class="same-level-list">
                {spellSubList.map((spell) => (<SpellCard spell={spell} />))}
            </div>
        ))}
    </div>
</BaseLayout>

<style>
    .spell-card-layout {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(var(--size-384), 1fr));
        gap: var(--size-16);

        .same-level-list {
            grid-column: 1 / -1;
            display: grid;
            grid-template-columns: subgrid;
            gap: inherit;
        }

    }
</style>